name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_consolidated.txt
        pip install pytest-cov
    
    - name: Create necessary directories
      run: |
        mkdir -p backend/{data,logs,config}
        touch backend/logs/twin_decisions.log
    
    - name: Run system validations
      run: |
        python backend/core/run_validations.py --create-defaults
      env:
        # Mock environment variables for testing
        OPENAI_API_KEY: test_key
        TWILIO_ACCOUNT_SID: ACtest32characterstring123456789012
        TWILIO_AUTH_TOKEN: test32characterstring123456789012
        TWILIO_PHONE_NUMBER: +1234567890
        USER_PHONE_NUMBER: +0987654321
    
    - name: Run tests with pytest
      run: |
        python -m pytest backend/tests/ -v --cov=backend --cov-report=xml --cov-report=html
      continue-on-error: true
    
    - name: Test brain modules
      run: |
        python test_brain_v2.py
      continue-on-error: true
    
    - name: Test memory system
      run: |
        python test_memory_system.py
      continue-on-error: true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
    
    - name: Run Black (code formatting check)
      run: |
        black --check --diff backend/
      continue-on-error: true
    
    - name: Run Flake8 (linting)
      run: |
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Run MyPy (type checking)
      run: |
        mypy backend/core/ --ignore-missing-imports
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit (security linting)
      run: |
        bandit -r backend/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety (dependency vulnerability check)
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
      if: always()

  integration:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_consolidated.txt
    
    - name: Test package installation
      run: |
        pip install -e .
        digital-twin --help || echo "CLI not fully configured yet"
        twin-validate --help || echo "Validation CLI not fully configured yet"
    
    - name: Test import structure
      run: |
        python -c "from backend import TwinDecisionLoop, ActionClassifier; print('✅ Imports working')"
        python -c "from brain_modules import HeuristicBrain; print('✅ Brain modules working')"
        python -c "from memory_system import EpisodicMemory; print('✅ Memory system working')"